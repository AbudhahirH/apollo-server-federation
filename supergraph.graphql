schema
  @core(feature: "https://specs.apollo.dev/core/v0.1")
  @core(feature: "https://specs.apollo.dev/join/v0.1") {
  query: Query
mutation: Mutation
}

directive @core(feature: String!) repeatable on SCHEMA

directive @join__field(
  graph: join__Graph
  requires: join__FieldSet
  provides: join__FieldSet
) on FIELD_DEFINITION

directive @join__type(
  graph: join__Graph!
  key: join__FieldSet
) repeatable on OBJECT | INTERFACE

directive @join__owner(graph: join__Graph!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

type Account
  @join__owner(graph: ACCOUNTS)
  @join__type(graph: ACCOUNTS, key: "id")
  @join__type(graph: TRANSACTIONS, key: "id") {
  active: Boolean @join__field(graph: ACCOUNTS)
  alias: String @join__field(graph: ACCOUNTS)
  balance: Float @join__field(graph: ACCOUNTS)
  customerId: String @join__field(graph: ACCOUNTS)
  id: ID! @join__field(graph: ACCOUNTS)
  transactions: [Transaction] @join__field(graph: TRANSACTIONS)
}

type Customer
  @join__owner(graph: CUSTOMERS)
  @join__type(graph: CUSTOMERS, key: "id")
  @join__type(graph: ACCOUNTS, key: "id") {
  accounts: [Account] @join__field(graph: ACCOUNTS)
  active: Boolean @join__field(graph: CUSTOMERS)
  firstName: String @join__field(graph: CUSTOMERS)
  id: ID! @join__field(graph: CUSTOMERS)
  lastName: String @join__field(graph: CUSTOMERS)
}

scalar join__FieldSet

enum join__Graph {
  ACCOUNTS @join__graph(name: "accounts", url: "http://localhost:4001/")
  CUSTOMERS @join__graph(name: "customers", url: "http://localhost:4002/")
  TRANSACTIONS @join__graph(name: "transactions", url: "http://localhost:4003/")
}

type Query {
  account(id: ID!): Account @join__field(graph: ACCOUNTS)
  accounts: [Account] @join__field(graph: ACCOUNTS)
  customer(id: ID!): Customer @join__field(graph: CUSTOMERS)
  customers: [Customer] @join__field(graph: CUSTOMERS)
  transaction(id: ID!): Account @join__field(graph: TRANSACTIONS)
  transactions: [Account] @join__field(graph: TRANSACTIONS)
}

type Transaction
  @join__owner(graph: TRANSACTIONS)
  @join__type(graph: TRANSACTIONS, key: "id") {
  accountId: String @join__field(graph: TRANSACTIONS)
  amount: Float @join__field(graph: TRANSACTIONS)
  id: ID! @join__field(graph: TRANSACTIONS)
  type: String @join__field(graph: TRANSACTIONS)
}


input CreateAccountInput {
    id: ID!
    customerId: String
    alias: String
    balance:Float
    active:Boolean
}
type Mutation {
    createAccount(input: CreateAccountInput!): Account @join__field(graph: ACCOUNTS)
    updateAccount(id: Int!, input: CreateAccountInput!): Account @join__field(graph: ACCOUNTS)
    deleteAccount(id: String!): Account @join__field(graph: ACCOUNTS)
}

